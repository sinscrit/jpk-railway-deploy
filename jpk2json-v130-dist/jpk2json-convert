#!/usr/bin/env python3
"""
JPK2JSON Converter v130 - Command Line Interface

A standalone converter that transforms Jitterbit JPK files into JSON format
suitable for import into Jitterbit interfaces.

Usage:
    jpk2json-convert input.jpk [output.json]
    jpk2json-convert --help
    jpk2json-convert --version

Features:
- Smart hybrid Type 500 component generation
- JSON escaping fix for JavaScript runtime errors  
- Generic converter works with any JPK file
- No external dependencies (Python standard library only)
"""

import sys
import os
import argparse

# Add the jpk2json package to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'jpk2json'))

def main():
    """Main CLI entry point."""
    
    parser = argparse.ArgumentParser(
        description='JPK2JSON Converter v130 - Convert Jitterbit JPK files to JSON format',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  jpk2json-convert project.jpk                    # Convert to project.json
  jpk2json-convert project.jpk output.json       # Convert to output.json
  jpk2json-convert --version                      # Show version info

Features:
  ‚úÖ Smart hybrid Type 500 component generation
  ‚úÖ JSON escaping fix (prevents JavaScript runtime errors)
  ‚úÖ Generic converter (works with any JPK file)
  ‚úÖ No external dependencies required
  ‚úÖ Production-ready and fully tested

For more information, see README.md
        """
    )
    
    parser.add_argument(
        'jpk_file',
        nargs='?',
        help='Input JPK file to convert'
    )
    
    parser.add_argument(
        'output_file',
        nargs='?',
        help='Output JSON file (optional, defaults to input filename with .json extension)'
    )
    
    parser.add_argument(
        '--version',
        action='version',
        version='JPK2JSON Converter v130 (Production Release)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='Enable verbose output'
    )
    
    args = parser.parse_args()
    
    # Handle version and help
    if not args.jpk_file:
        parser.print_help()
        return 1
    
    # Validate input file
    if not os.path.exists(args.jpk_file):
        print(f"‚ùå Error: Input file '{args.jpk_file}' not found")
        return 1
    
    if not args.jpk_file.lower().endswith('.jpk'):
        print(f"‚ö†Ô∏è  Warning: Input file '{args.jpk_file}' does not have .jpk extension")
    
    # Determine output file
    if args.output_file:
        output_file = args.output_file
    else:
        # Replace .jpk with .json, or add .json if no extension
        base_name = os.path.splitext(args.jpk_file)[0]
        output_file = f"{base_name}.json"
    
    # Import and run the converter
    try:
        from converter import main as converter_main
        
        print(f"üöÄ JPK2JSON Converter v130 - Starting conversion...")
        print(f"üìÅ Input:  {args.jpk_file}")
        print(f"üìÑ Output: {output_file}")
        print()
        
        # Create arguments for the converter
        converter_args = type('Args', (), {
            'jpk_path': args.jpk_file,
            'output_path': output_file,
            'verbose': args.verbose
        })()
        
        # Run the conversion
        exit_code = converter_main(converter_args)
        
        if exit_code == 0:
            print()
            print(f"‚úÖ Conversion completed successfully!")
            print(f"üìÑ Output saved to: {output_file}")
            
            # Show file size
            try:
                size_mb = os.path.getsize(output_file) / (1024 * 1024)
                print(f"üìä Output size: {size_mb:.1f} MB")
            except:
                pass
                
            print()
            print("üéØ Next steps:")
            print("   1. Import the JSON file into your Jitterbit interface")
            print("   2. Verify the project loads and displays correctly")
            print("   3. Test the workflows and components")
            
            return 0
        else:
            print()
            print("‚ùå Conversion failed - check the error messages above")
            return 1
            
    except ImportError as e:
        print(f"‚ùå Error: Could not import converter module: {e}")
        print("   Make sure you're running this script from the correct directory")
        return 1
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return 1

if __name__ == '__main__':
    sys.exit(main())
